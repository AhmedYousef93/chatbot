<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use OpenAI\Laravel\Facades\OpenAI;

class ChatController extends Controller
{


    protected $dbSchema = <<<EOD
                            Table: housing_units
                            Columns:
                            - id: BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY
                            - name: VARCHAR(255) NOT NULL
                            - price: DECIMAL(10, 2) NOT NULL
                            - location: VARCHAR(255) NOT NULL
                            - features: VARCHAR(255) NOT NULL ('wifi', 'parking', 'gym',etc)
                            - rooms: INTEGER NOT NULL
                            - description: TEXT
                            - created_at: TIMESTAMP NULL
                            - updated_at: TIMESTAMP NULL

                            EOD;


    public function smartChat(Request $request)
    {
        $userMessage = $request->message;

        $greetings = ['ููุง',
                      'ุฃููุงู', 'ูุฑุญุจุงู', 'ุงูุณูุงู ุนูููู', 'ุตุจุงุญ ุงูุฎูุฑ', 'ูุณุงุก ุงูุฎูุฑ', 'ููู ุญุงููุ',
                      'ุฃููุงู ูุณููุงู', 'ุตุจุงุญ ุงูููุฑ', 'ูุณุงุก ุงูููุฑ', 'ูุฑุญุจุง ุจู', 'ุชุญูุฉ ุทูุจุฉ', 'ุฃููุงู ุจู',
                      'ููู ุญุงูููุ', 'ุงูุณูุงู ุนูููู ูุฑุญูุฉ ุงููู ูุจุฑูุงุชู', 'ุตุจุงุญ ุงููุฑุฏ', 'ูุณุงุก ุงููุฑุฏ', 'ุฃููุงู ุจุงูุตุฏูู',
                      'Hello', 'Hi', 'Hey', 'Good morning', 'Good afternoon', 'Good evening', 'How are you?', 'Howdy',
                      'Greetings', "What's up?", 'Welcome', 'Morning', 'Afternoon', 'Evening', 'Hi there', 'Yo', "How's it going?",
                      "What's going on?", 'Good day', 'Salutations'
        ];
        foreach ($greetings as $greeting) {
            if (stripos($userMessage, $greeting) !== false) {
                return response()->json([
                    'reply' => 'ูุฑุญุจุงู! ููู ูููููู ูุณุงุนุฏุชู ุงููููุ ๐'
                ]);
            }
        }

        try {
            $response    = Http::withToken('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')->post('https://openrouter.ai/api/v1/chat/completions', [
                'model'    => 'mistralai/mistral-7b-instruct',
                'messages' => [
                    [
                        'role' => 'system',

                        'content' => <<<EOD
ุฃูุช ุฑูุจูุช ุฏุฑุฏุดุฉ ุนูุงุฑู ุชุชุญุฏุซ ุงูุนุฑุจูุฉุ ูููุชู ูุณุงุนุฏุฉ ุงููุณุชุฎุฏููู ูู ุฅูุฌุงุฏ ูุญุฏุงุช ุณูููุฉ ุนู ุทุฑูู ุชูููุฏ ุงุณุชุนูุงูุงุช SQL ุจูุงุกู ุนูู ุทูุจุงุชููุ ุญุณุจ ุงููุฎุทุท ุงูุชุงูู ููุงุนุฏุฉ ุงูุจูุงูุงุช:
{$this->dbSchema}

ุงูุชุนูููุงุช:
- ุฑุฏ ุนูู ุทูุจุงุช ุงููุณุชุฎุฏู ุจูุจุฑุฉ ูุฏูุฉ ููุณุงุนุฏุฉ.
- ูุง ุชูู ุจุชุฑุฌูุฉ ุฃู ุชุนุฏูู ุงุณู location ุงูุฐู ููุชุจู ุงููุณุชุฎุฏูุ ุงุณุชุฎุฏูู ููุง ูู ูุฑุณู ุฏุงุฎู  ุงูุงุณุชุนูุงู.
-ุงุจุญุซ  location ุจุงูุนุฑุจู ูููุงู ุงูุงูุฌููุฒู
- If the user asks for properties (e.g., "houses in ุงูุฑูุงุถ under $500k" or "apartments around $1000"), generate a single SQL SELECT query to fetch matching records from the properties table.
- Format the query in a code block: sql\nYOUR_QUERY\n

- Ensure queries are safe (no injections, proper SQL syntax) and select only relevant columns: id, name, price, location, rooms.

- ุงุณุชุฎุฏู ุชุทุงุจู ูุฑู:

  - ุนุฏุฏ ุงูุบุฑู: ุงุณุชุฎุฏู ุชุทุงุจู ุฏูููุ ูุซูุงู "3 ุบุฑู" ุชุตุจุญ rooms = 3.
  - ุงูุณุนุฑ:
    - ุฅุฐุง ูุงู ุงููุณุชุฎุฏู "ุญูุงูู" ุฃู "ูุฑุงุจุฉ"ุ ุงุณุชุฎุฏู ูุทุงู ยฑ25ูช (ูุซูุงู "ุญูุงูู 1000" ุชุนูู BETWEEN 750 AND 1250).
    - ุฅุฐุง ูุงู "ุฃูู ูู" ุฃู "ุชุญุช"ุ ุงุณุชุฎุฏู price < ุงููููุฉ.
    - ุฅุฐุง ูุงู "ุฃูุซุฑ ูู" ุฃู "ููู"ุ ุงุณุชุฎุฏู price > ุงููููุฉ.
    - ุฅุฐุง ูู ููุญุฏุฏ ุทุฑููุฉ ููุณุนุฑุ ุงุณุชุฎุฏู ูุทุงู ุชูุฑูุจู ยฑ25ูช ุชููุงุฆูุงู.
- ุญุฏ ุงููุชุงุฆุฌ ูุฌุจ ุฃู ูููู 5 ุตููู ููุท ุจุงุณุชุฎุฏุงู LIMIT 5.
- ุฅุฐุง ูุงู ุงูุทูุจ ุบูุฑ ูุงุถุญ ุฃู ุบูุฑ ูุชุนูู ุจุงูุนูุงุฑุงุช (ูุซู "ูุฑุญุจุงู")ุ ุฑุฏ ุจุดูู ูุฏูู ูุงุทูุจ ุชูุถูุญ (ูุซู "ูู ูุถูู ุญุฏุฏ ุงููููุน ุฃู ุงูููุฒุงููุฉ").
- ุฅุฐุง ูู ููู ููุงู ูุชุงุฆุฌ ูุชููุนุฉ (ูุซู "ูู ูุงุฑููุง")ุ ุฃุฑูู ุงูุงุณุชุนูุงู ููุถุญ ุฃู ุงููุชุงุฆุฌ ูุฏ ุชููู ุบูุฑ ูุชุงุญุฉ ูุงูุชุฑุญ ูููุนุงู ุญููููุงู ูุซู "ููุงูู".
- ูุง ุชูุดุฆ ุงุณุชุนูุงูุงุช DELETE ุฃู UPDATE ุฃู INSERT โ ููุท SELECT.

EOD
                    ],
                    ['role' => 'user', 'content' => $userMessage],
                ],
            ]);
            $botResponse = $response['choices'][0]['message']['content'] ?? 'Sorry, I couldnโt understand your request.';
            if (!preg_match('/```sql\n(.+?)\n```/s', $botResponse)) {
                return response()->json([
                    'reply' => 'ูู ุฃุชููู ูู ููู ุทูุจู ุจุดูู ุตุญูุญ. ูู ูุถูู ูุถูุญ ุงููููุน ุฃู ุงูุณุนุฑ ุฃู ุนุฏุฏ ุงูุบุฑู ุงููุทููุจุฉ.'
                ]);
            }
            $sqlQuery     = null;
            $propertyData = [];

            if (preg_match('/```sql\n(.+?)\n```/s', $botResponse, $queryMatch)) {
                $sqlQuery    = trim($queryMatch[1]);
                $botResponse = str_replace($queryMatch[0], '', $botResponse);
                Log::info($sqlQuery);
                try {
                    $propertyData = DB::select($sqlQuery);
                    return response()->json([
                        'reply' => count($propertyData) > 0 ? $propertyData : 'ูู ูุชู ุงูุนุซูุฑ ุนูู ูุญุฏุงุช ูุทุงุจูุฉ ูุทูุจูุ ูุฑุฌู ุชุนุฏูู ุงูุทูุจ.',
                    ]);
                } catch (\Exception $e) {
                    Log::info($e->getMessage());

                    return response()->json([
                        'reply' => 'ูู ุฃุชููู ูู ููู ุทูุจู ุจุดูู ุตุญูุญ. ูู ูุถูู ูุถูุญ ุงููููุน ุฃู ุงูุณุนุฑ ุฃู ุนุฏุฏ ุงูุบุฑู ุงููุทููุจุฉ.'
                    ]);
                }
            }


        } catch (\Exception $e) {
            return response()->json([
                'message' => 'An error occurred while processing your request. Please try again later.'
            ], 500);
        }


    }


}
